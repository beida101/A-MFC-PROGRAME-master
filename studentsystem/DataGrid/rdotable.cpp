//Download by http://www.NewXing.com
// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "rdotable.h"

// Dispatch interfaces referenced by this interface
#include "rdoColumns.h"
#include "_rdoResultset.h"


/////////////////////////////////////////////////////////////////////////////
// CrdoTable properties

/////////////////////////////////////////////////////////////////////////////
// CrdoTable operations

CrdoColumns CrdoTable::GetRdoColumns()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CrdoColumns(pDispatch);
}

CString CrdoTable::GetName()
{
	CString result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

BOOL CrdoTable::GetUpdatable()
{
	BOOL result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

long CrdoTable::GetRowCount()
{
	long result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString CrdoTable::GetType()
{
	CString result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

C_rdoResultset CrdoTable::OpenResultset(const VARIANT& Type, const VARIANT& LockType, const VARIANT& Options)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, parms,
		&Type, &LockType, &Options);
	return C_rdoResultset(pDispatch);
}
