//Download by http://www.NewXing.com
// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "_rdoengine.h"

// Dispatch interfaces referenced by this interface
#include "rdoEnvironments.h"
#include "rdoerrors.h"
#include "_rdoenvironment.h"


/////////////////////////////////////////////////////////////////////////////
// C_rdoEngine properties

/////////////////////////////////////////////////////////////////////////////
// C_rdoEngine operations

long C_rdoEngine::GetRdoDefaultLoginTimeout()
{
	long result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void C_rdoEngine::SetRdoDefaultLoginTimeout(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

CString C_rdoEngine::GetRdoDefaultUser()
{
	CString result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void C_rdoEngine::SetRdoDefaultUser(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString C_rdoEngine::GetRdoDefaultPassword()
{
	CString result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void C_rdoEngine::SetRdoDefaultPassword(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CrdoEnvironments C_rdoEngine::GetRdoEnvironments()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CrdoEnvironments(pDispatch);
}

CrdoErrors C_rdoEngine::GetRdoErrors()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CrdoErrors(pDispatch);
}

CString C_rdoEngine::GetRdoVersion()
{
	CString result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

long C_rdoEngine::GetRdoDefaultCursorDriver()
{
	long result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void C_rdoEngine::SetRdoDefaultCursorDriver(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long C_rdoEngine::GetRdoDefaultErrorThreshold()
{
	long result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void C_rdoEngine::SetRdoDefaultErrorThreshold(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

void C_rdoEngine::rdoRegisterDataSource(LPCTSTR DSN, LPCTSTR Driver, BOOL Silent, LPCTSTR Attributes)
{
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BOOL VTS_BSTR;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 DSN, Driver, Silent, Attributes);
}

C_rdoEnvironment C_rdoEngine::rdoCreateEnvironment(LPCTSTR Name, LPCTSTR User, LPCTSTR Password)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, parms,
		Name, User, Password);
	return C_rdoEnvironment(pDispatch);
}

long C_rdoEngine::GetRdoLocaleID()
{
	long result;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void C_rdoEngine::SetRdoLocaleID(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}
